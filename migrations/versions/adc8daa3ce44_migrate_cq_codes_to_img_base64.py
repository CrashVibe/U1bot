"""migrate_cq_codes_to_img_base64

迁移 ID: adc8daa3ce44
父迁移: 782cb0785d08
创建时间: 2025-07-11 01:05:56.515358

"""

from __future__ import annotations

import json
import re
from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

revision: str = "adc8daa3ce44"
down_revision: str | Sequence[str] | None = "782cb0785d08"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def extract_base64_from_cq_codes(text: str) -> list[str]:
    """
    从文本中提取所有 [CQ:image,file=base64://...] 中的 base64 数据。
    """
    base64_images = []
    # 匹配 [CQ:image,file=base64://xxxxx] 格式
    cq_pattern = r"\[CQ:image,file=base64://([^]]+)\]"
    matches = re.findall(cq_pattern, text)
    base64_images.extend(matches)
    return base64_images


def remove_cq_codes(text: str) -> str:
    """
    移除文本中的所有 CQ 码。
    """
    # 移除所有 [CQ:...] 格式的代码
    return re.sub(r"\[CQ:[^\]]+\]", "", text).strip()


def upgrade(name: str = "") -> None:
    if name:
        return
    
    # 检查 img_base64 列是否存在
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    columns = [col["name"] for col in inspector.get_columns("cave_models")]

    # 如果字段不存在，则添加它
    if "img_base64" not in columns:
        with op.batch_alter_table("cave_models", schema=None) as batch_op:
            batch_op.add_column(sa.Column("img_base64", sa.JSON(), nullable=False))

    # 数据迁移：处理现有的 CQ 码数据
    # 查询所有包含 CQ 码的记录
    result = connection.execute(
        sa.text("SELECT id, details FROM cave_models WHERE details LIKE '%[CQ:image%'")
    )

    for row in result:
        record_id, details = row

        # 提取 base64 数据
        base64_images = extract_base64_from_cq_codes(details)

        # 移除 CQ 码
        clean_details = remove_cq_codes(details)

        # 更新记录
        connection.execute(
            sa.text(
                "UPDATE cave_models SET details = :details, img_base64 = :img_base64 WHERE id = :id"
            ),
            {
                "details": clean_details,
                "img_base64": json.dumps(base64_images),
                "id": record_id,
            },
        )

    # 为没有图片的记录设置空数组
    connection.execute(
        sa.text("UPDATE cave_models SET img_base64 = '[]' WHERE img_base64 IS NULL OR img_base64 = ''")
    )

    connection.commit()


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("cave_models", schema=None) as batch_op:
        batch_op.drop_column("img_base64")

    # ### end Alembic commands ###
